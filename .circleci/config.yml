version: 2.1

parameters:
  gio_action:
    type: enum
    enum: [release, dry_release, publish_bundles, blank]
    default: blank
orbs:
  secrethub: secrethub/cli@1.0.0
  gravitee: gravitee-io/gravitee@dev:1.0.4
jobs:
  empty_job:
    docker:
     - image: alpine
    resource_class: small
    working_directory: /mnt/ramdisk
    steps:
      - run:
          name: "This is a dummy empty job (isn't it ?)"
          command: echo "No task is executed."

  dry_run_orchestrator:
    machine:
      image: 'ubuntu-1604:201903-01'
    environment:
      GITHUB_ORG: ${GITHUB_ORG}
      SECRETHUB_ORG: gravitee-lab
      SECRETHUB_REPO: cicd
    steps:
      - checkout
      - secrethub/install
      - gravitee/nexus_staging_prepare_bucket:
          dry_run: true
          maven_container_image_tag: stable-latest
          maven_profile_id: gio-release
          secrethub_org: gravitee-lab
          secrethub_repo: cicd
      - run:
          name: "Remember Gravitee Release Version"
          command: |
                    apt-get install -y jq
                    export RELEASE_VERSION_NUMBER=$(cat release.json | jq .version | awk -F '"' '{print $2}')
                    export TRIMMED_RELEASE_VERSION_NUMBER=$(echo "${RELEASE_VERSION_NUMBER}" | awk -F '-SNAPSHOT' '{print $1}')
                    export RELEASE_VERSION_NUMBER=${TRIMMED_RELEASE_VERSION_NUMBER}
                    echo "${RELEASE_VERSION_NUMBER}" > ./.remember.gravitee.release.version
                    echo "./.remember.gravitee.release.version" >> ./.gitignore
      - run:
          name: "Docker pull"
          command: |
                    docker pull quay.io/gravitee-lab/cicd-orchestrator:stable-latest
      - run:
          name: "Running the Gio CICD Orchestrator as docker container"
          command: |
                    echo "Checking pipeline env. : "
                    ls -allh
                    export GITHUB_ORG=gravitee-lab
                    export SECRETHUB_ORG=gravitee-lab
                    export SECRETHUB_REPO=cicd
                    echo "GITHUB_ORG=${GITHUB_ORG}"
                    echo "SECRETHUB_ORG=${SECRETHUB_ORG}"
                    echo "SECRETHUB_REPO=${SECRETHUB_REPO}"
                    # checking docker image pulled in previous step is there
                    docker images
                    # --> .secrets.json is used by Gravitee CI CD Orchestrator to authenticate to Circle CI
                    CCI_SECRET_FILE=$PWD/.secrets.json
                    secrethub read --out-file ${CCI_SECRET_FILE} ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/api/.secret.json
                    secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/secrethub-svc-account/token > ./.secrethub.credential
                    ls -allh ${CCI_SECRET_FILE}
                    # Docker volumes to map pipeline checked out git tree, .env file and .secrets.json files inside the docker container
                    # export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.env:/graviteeio/cicd/.env -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json"
                    export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json -v $PWD/.secrethub.credential:/graviteeio/cicd/.secrethub.credential"
                    export ENV_VARS="--env GH_ORG=${GITHUB_ORG} --env SECRETHUB_ORG=${SECRETHUB_ORG} --env SECRETHUB_REPO=${SECRETHUB_REPO}"
                    docker run --name orchestrator ${ENV_VARS} ${DOCKER_VOLUMES} --restart no -it quay.io/gravitee-lab/cicd-orchestrator:stable-latest -s mvn_release --dry-run
                    exit "$?"
      - run:
          name: "Come back to Gravitee Release Version"
          command: |
                    export RELEASE_VERSION_NUMBER=$(cat ./.remember.gravitee.release.version)
                    echo "RELEASE_VERSION_NUMBER=[${RELEASE_VERSION_NUMBER}]"
                    git checkout ${RELEASE_VERSION_NUMBER}

      # after release is finished, the nexus staging phase is
      - gravitee/nexus_staging_trigger:
          secrethub_org: gravitee-lab
          secrethub_repo: cicd
          ssh_nexus_staging_git_repo: git@github.com:gravitee-lab/nexus-staging.git

  run_orchestrator:
    machine:
      image: 'ubuntu-1604:201903-01'
    environment:
      GITHUB_ORG: ${GITHUB_ORG}
      SECRETHUB_ORG: gravitee-lab
      SECRETHUB_REPO: cicd
    steps:
      - checkout
      - secrethub/install
      - gravitee/nexus_staging_prepare_bucket:
          dry_run: false
          maven_container_image_tag: stable-latest
          maven_profile_id: gio-release
          secrethub_org: gravitee-lab
          secrethub_repo: cicd
      - run:
          name: "Remember Gravitee Release Version"
          command: |
                    apt-get install -y jq
                    export RELEASE_VERSION_NUMBER=$(cat release.json | jq .version | awk -F '"' '{print $2}')
                    export TRIMMED_RELEASE_VERSION_NUMBER=$(echo "${RELEASE_VERSION_NUMBER}" | awk -F '-SNAPSHOT' '{print $1}')
                    export RELEASE_VERSION_NUMBER=${TRIMMED_RELEASE_VERSION_NUMBER}
                    echo "${RELEASE_VERSION_NUMBER}" > ./.remember.gravitee.release.version
                    echo "./.remember.gravitee.release.version" >> ./.gitignore
      - run:
          name: "Docker pull"
          command: |
                    docker pull quay.io/gravitee-lab/cicd-orchestrator:stable-latest
      - run:
          name: "Running the Gio CICD Orchestrator as docker container"
          command: |
                    echo "Checking pipeline env. : "
                    ls -allh
                    export GITHUB_ORG=gravitee-lab
                    export SECRETHUB_ORG=gravitee-lab
                    export SECRETHUB_REPO=cicd
                    echo "GITHUB_ORG=${GITHUB_ORG}"
                    echo "SECRETHUB_ORG=${SECRETHUB_ORG}"
                    echo "SECRETHUB_REPO=${SECRETHUB_REPO}"
                    # checking docker image pulled in previous step is there
                    docker images
                    # --> .secrets.json is used by Gravitee CI CD Orchestrator to authenticate to Circle CI
                    CCI_SECRET_FILE=$PWD/.secrets.json
                    secrethub read --out-file ${CCI_SECRET_FILE} ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/api/.secret.json
                    secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/graviteebot/circleci/secrethub-svc-account/token > ./.secrethub.credential
                    ls -allh ${CCI_SECRET_FILE}
                    # Docker volumes to map pipeline checked out git tree, .env file and .secrets.json files inside the docker container
                    # export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.env:/graviteeio/cicd/.env -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json"
                    export DOCKER_VOLUMES="-v $PWD:/graviteeio/cicd/pipeline -v $PWD/.secrets.json:/graviteeio/cicd/.secrets.json -v $PWD/.secrethub.credential:/graviteeio/cicd/.secrethub.credential"
                    export ENV_VARS="--env GH_ORG=${GITHUB_ORG} --env SECRETHUB_ORG=${SECRETHUB_ORG} --env SECRETHUB_REPO=${SECRETHUB_REPO}"
                    docker run --name orchestrator ${ENV_VARS} ${DOCKER_VOLUMES} --restart no -it quay.io/gravitee-lab/cicd-orchestrator:stable-latest -s mvn_release --dry-run false
                    exit "$?"
      - run:
          name: "Come back to Gravitee Release Version"
          command: |
                    export RELEASE_VERSION_NUMBER=$(cat ./.remember.gravitee.release.version)
                    echo "RELEASE_VERSION_NUMBER=[${RELEASE_VERSION_NUMBER}]"
                    git checkout ${RELEASE_VERSION_NUMBER}
      - gravitee/nexus_staging_trigger:
          secrethub_org: gravitee-lab
          secrethub_repo: cicd
          ssh_nexus_staging_git_repo: git@github.com:gravitee-lab/nexus-staging.git

  publish_bundles_job:
    machine:
      image: 'ubuntu-1604:201903-01'
    environment:
      GITHUB_ORG: ${GITHUB_ORG}
      SECRETHUB_ORG: gravitee-lab
      SECRETHUB_REPO: cicd
    steps:
      - checkout
      - secrethub/install
      - gravitee/publish_bundles:
          dry_run: false
          maven_container_image_tag: stable-latest
          maven_profile_id: gio-release
          secrethub_org: gravitee-lab
          secrethub_repo: cicd

workflows:
  version: 2.1
  # Blank process invoked when pull requests events are triggered
  blank:
    when:
      equal: [ blank, << pipeline.parameters.gio_action >> ]
    jobs:
      - empty_job:
          context: cicd-orchestrator
  # Release Process DRY RUN
  dry_release_process:
    when:
      equal: [ dry_release, << pipeline.parameters.gio_action >> ]
    jobs:
      - dry_run_orchestrator:
          context: cicd-orchestrator
          filters:
            branches:
              # ---
              # Will run only when git commits are pushed to a release branch
              # Therefore, will be triggered when a pull request, with target branch being
              # a release branch, is accepted
              only:
                - /^[0-9]+.[0-9]+.x/ # e.g. 4.5.x
                # - /^[0-9]+.[0-9]+.[0-9]+/ # e.g. 3.0.0
                - /^[0-9]+.[0-9]+.[0-9]+-beta/ # e.g. 3.0.0-beta
                - master # ? as discussed ? if un-commented, any new pushed commit to master will trigger a Release Process DRY RUN
  release_process:
    when:
      equal: [ release, << pipeline.parameters.gio_action >> ]
    jobs:
      - run_orchestrator:
          context: cicd-orchestrator
          # one cannot filters branches when conditonal workflows ?
          filters:
            branches:
              # ---
              # Will run only when git commits are pushed to master branch
              # Therefore, will be triggered when a pull request is accepted, with target branch being
              # the master branch.
              only:
                - /^[0-9]+.[0-9]+.x/ # e.g. 4.5.x
                # - /^[0-9]+.[0-9]+.[0-9]+/ # e.g. 3.0.0
                - /^[0-9]+.[0-9]+.[0-9]+-beta/ # e.g. 3.0.0-beta
                - master # ? as discussed ? if un-commented, any new pushed commit to master will trigger a Release Process DRY RUN
  # ---
  # This workflow is triggered by the git tag created when
  # the maven release process successfully completes.
  publish_bundles:
    when:
      - equal: [ publish_bundles, << pipeline.parameters.gio_action >> ]
    jobs:
      - publish_bundles_job:
          # requires:
            # - release_process
          context: cicd-orchestrator
          # one cannot filters tag/branches when conditonal workflows
          filters:
            branches:
              # ---
              # Will run only when git commits are pushed to master branch
              # Therefore, will be triggered when a pull request is accepted, with target branch being
              # the master branch.
              ignore:
                # ---
                - /^feature\/.*/ # feature/<any string here>
                - /^support\/.*/ # support/<any string here>
                - /^issue\/.*/ # issue/<any string here>
                - /^cicd\/.*/ # cicd/<any string here>
                - /^.*\/.*/ # <any string here>/<any string here>
            tags:
              # only: /^v.*/
              only:
                - /^[0-9]+.[0-9]+.[0-9]+/
                - /^[0-9]+.[0-9]+.[0-9]+-alpha/
                - /^[0-9]+.[0-9]+.[0-9]+-beta/
  # ---
  # this workflow is triggered
  nexus_staging_trigger:
    # see https://circleci.com/docs/2.0/configuration-reference/#logic-statement-examples
    # when:
      # and:
        # - equal: [ nexus_staging, << pipeline.parameters.gio_action >> ]
        # - not: << pipeline.parameters.dry_run >>
    jobs:
      # return to simple definition :
      - gravitee/nexus_staging_trigger:
          context: cicd-orchestrator
          secrethub_org: gravitee-lab
          secrethub_repo: cicd
          ssh_nexus_staging_git_repo: git@github.com:gravitee-lab/nexus-staging.git
          filters:
            branches:
              # ---
              # Will run only when git commits are pushed to master branch
              # Therefore, will be triggered when a pull request is accepted, with target branch being
              # the master branch.
              ignore:
                # ---
                - /^feature\/.*/ # feature/<any string here>
                - /^support\/.*/ # support/<any string here>
                - /^issue\/.*/ # issue/<any string here>
                - /^cicd\/.*/ # cicd/<any string here>
                - /^.*\/.*/ # <any string here>/<any string here>
            tags:
              # only: /^v.*/
              only:
                - /^[0-9]+.[0-9]+.[0-9]+/
                - /^[0-9]+.[0-9]+.[0-9]+-alpha/
                - /^[0-9]+.[0-9]+.[0-9]+-beta/
